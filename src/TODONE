[x] Pyret on Whalesong
  [x] Convert ast, runtime to racket/base
  [x] Remove all non-whalesong imports from runtime.rkt
    [x] match
    [x] list
    [x] srfi
    [x] string
    [x] math
    [x] set
  [x] Blocked on Danny for:
    - with-handlers
    - REPL

[x] parse method() ... end syntax

[x] decide on built-in exception types
  - types in error.arr, desugar/compile to error.make-error
[x] mis-applied function error message is crap:
    p-fun-f823: contract violation
     expected: p-fun?
     given: (p-bool ...

[x] Capture avoiding names in catch blocks

[x] Allow exprs for object literal field names
[x] := for assignment
[x] don't use ? in identifiers from data
[x] surface syntax for operators?
[x] Desugar data
  [x] Brand checks on struct creation
  [x] Annotations actually checked
  [/] constructed annotations actually checked
  [x] Skeleton of struct/data desugaring
[x] Testing libs (check/expect)

[x] surface syntax for first-class methods
[x] Make tests work again, don't use brittle sandbox
  [x] Read and understand docs for namespace-require, etc.
  [x] Clean up
    [x] Consolidate copied code in compile for s-prog
    [x] Remove useless code from eval.rkt
    [!] Move test-utils code to eval.rkt?
      - Can't, causes loading cycle

[x] figure out what define-syntax is less boilerplate in parser.rkt
[x] get rid of #<void> in output in DrRacket
[x] get rid of ugly value printing in output in DrRacket

[x] Sensible story on importing libs like big-bang, image
  [x] Change desugaring of modules to use provide/require
  [x] Create a racket-ffi subdirectory of lang/
  [x] Create files in racket-ffi that implement e.g. big-bang
  [x] Register these files in desugar.rkt, and compile them
     to require statements
  [x] Clean up
    [x] Is the printer option to print-pyret necessary anymore?
    [x] Should runtime-ext exist anymore?
    [x] Create useful ffi helpers like wrap-racket-fun and share between
       ffi modules (there's copied code right now)

[x] Some sort of module system for sane libraries
  [x] nested modules graph
[x] application should check type better?
  - Used Value * everywhere to ensure only Pyret values come in
[x] cleanup test-utils
[x] stop using typed racket except for data definitions
  - let's stick with TR for as long as we can
[x] cond implicit else should be in desugar, not compile
[x] negative numbers
[x] unsaved-editor symbol showing up as an identifier
[x] Form for catching errors
[x] module system?
[x] Form for throwing errors (syntax & ast/semantics)
[x] None/null/nothing value built in
[x] Lists built in?
[x] How should short-circuiting booleans work?
  - do!
[x] anonymous functions... :-)
[x] first class methods
[x] Functionalize objects
[x] Write some tests for extending with seals
[x] Allow exprs for object literal field names
[x] := for assignment

[x] rename 'def' to 'var'
[x] Where do built-in number methods go?
    -meta-number

[x] Think about self-reference/method invocation
  - Colon syntax for self-passing

[x] conditionals
[x] We need if

[x] Brackets for expr-based lookup
[x] See what we can share from p-base
    - A fair amount; updated definitions of get-dict, get-seal, etc.

[x] make the empty file be a valid program
[x] hook up to top level better, and drracket's repl
[x] make the definitions show up in the repl window

[x] resolve submoduley things with tokens and dedent errors
   - just have a pyret-tokenizer.rkt

[x] seal(obj, fields)
   - all of names must exist on obj
   - result is an obj with the fields as its seal, which is a mutable proxy 
     to the original obj

[X] brander()
   - produces brander object with brand() and check() methods
   - brand() used on any value, produces a copy of the value (either reference
     or prim) where this-gensym has been added to the set of brands.
   - check() recognizes any object with this-gensym in its set of brands
     and returns true, false if it does not have the brand.

[x] make a real AST (in pyret.rkt?  before or after it?)

[x] keep seal() consistent with initialization/new object fields?
    - seal doesn't care about new object fields

[x] make seal into a built-in method?
  - no, too easy to forge.  should be built-in (Discussion Nov 26)

Seal/lookup tests
  [x] no seal success
  [x] no seal field not found
  [x] 2 seals success
  [x] 2 seals caught by first
  [x] 2 seals caught by second

Assignment tests
  [x] assignment success
  [x] assignment fail
  [x] assignment seal fail
  [x] assignment seal success
  [x] 2 seals success
  [x] 2 seals caught by first
  [x] 2 seals caught by second

[x] add default initiliazers for all values in pyret.rkt e.g. (mknum 5)

[x] allow hyphens in identifiers
[x] constructed types
[x] Think MOAR about self-reference/method invocation

[x] figure out duplicate identifiers with (define)
  - fixed with letrec
[x] can we use ()? instead of multiple arms in grammar.rkt?
  - NO
  - but we can use []
[x] in compile-tests, ensure a fresh namespace before each run
[x] Change Number/String/Bool into a-names
[x] Have mk-num/str/bool brand
[x] Have global brand checkers for num/str/bool
  - We have Number?, etc, with implicit brands on creation

[x] Desugar function annotations into checks for these brands
[x] Actually compile annotations to checks

[x] syntax for rudimentary types ::
[x] checking for rudimentary types

[x] make helper for id-parsing
[x] and str-parsing in pyret.rkt

[x] Racket.builtin for convenient libraries
  - e.g. Racket.string-append(pyval, pyval)
  - unwrapping and wrapping of pyret constants to Racket #'s and str's

[x] Name<Name<Foo>> is a syntax error, because >> is parsed as a single
   token. Name<Name<Foo> > parses fine.

[x] Parser cleanup to remove duplicated code across cases:
  [x] Add sub-production for field name (either [key-expr] or key)
  [x] Add sub-production for lastfield (either field or (field ","))
  [x] Rename s-dot-method, s-bracket-method
  [x] make docstrings first-class productions
[x] Better string-checking in computed field name positions in object literals

[x] optional "," in object literals
[x] letrec* for sequences
[x] not before things as opposed to after?
[x] fulfills keyword for inline tests
[x] Cyclic modules check
