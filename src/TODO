Need-to-have (soon):
[] Documentation
  [x] Extract docs from code
[] Type-checking up to List(a) and arrows/records
  [] "Also, we've been talking about and working on the untyped to typed
      contract installation - do we want to have some version of that
      working?"
     - contracts up to monomorphic structures and polymorphic functions
[] Performance
  [] Change method representation, optimize method calls
    [] Add a new m field to create (p-method f m)
    [] Update all uses of p-method (all are in runtime.rkt or compile-tests.rkt
       as of 439aa3b2266dbec97c29b9295b0f4611d7af1ed6)
    [] In compile, create two versions of the function, one which is what we
       do now, and another which is optimized for method calls, of the form
       (λ (arg1) (λ (arg2 ...) e))
    [x] In compile, change (s-app (s-get-raw-field e1 e2) e3 ...) into
       (let ([maybe-meth (get-field e1 e2)])
         (cond
          [(s-method? maybe-meth) ((p-method-m maybe-meth) maybe-meth e3 ...)]
          [(s-fun? maybe-meth) ((p-fun-f maybe-meth) e3 ...)]))
    [] Add a desugar/typecheck error for methods of zero arguments; can still
       happen at runtime due to fun/method conversions
    [x] Figure out what to do with all the builtins that use apply and rely on a
       single representation (these are probably a bottleneck)
       - Macros probably a good idea here
  [] Add a function field to every struct that throws an appropriate error
[] Indentation enforcement

15-minute tasks
[x] Make everything with methods consistent with functions
  [x] doc
  [] type variable declaration
[] find an error in runtime.rkt and give it a good error message:
  - variant in Error error.arr
  - case in error.make-error in error.arr
  - appropriate label, srcloc, and message in runtime.rkt
[] Move some compile-tests to pyret/ test directory and use unittest
[] pretty-print a-record
[] Parser cleanup to remove duplicated code across cases:
  [x] Add sub-production for field name (either [key-expr] or key)
  [] Add sub-production for lastfield (either field or (field ","))
  [] Rename s-dot-method, s-bracket-method
  [x] make docstrings first-class productions
[x] Better string-checking in computed field name positions in object literals
[] What is the none struct in runtime.rkt?

CS019 Assignments
[x] Flags
[] Rocket
[x] Filesystem
[x] Sortacle
[] Oracle
[] Brown Heaps
[x] Updater
[] ||ism
[] Tour Guide
[x] Seam Carving (image libs)

Need-to-have (eventually):
[] not before things as opposed to after?
[] fulfills keyword for inline tests
[] Cyclic modules check
[] provide Data
[] Indentation enforcement
  [] Need pyrfmt: a way to print out canonically correct pyret code
    [] Keep track of comments in parsing
    [] Decide on indentation conventions and implement
[] better error reporting / pretty printing / support for debugging.
   For example, printing out names for brands (where appropriate)
   would be a start.
[] Data urls for inline images
[] String templates (ie, "blah %s" with some way of filling in stuff for %s).

Nice-to-have (eventually):
[] macros for creating objects/lists/functions in pyret desugaring
[] implicit cond if you start fun with a |
[] DrRacket syntax highlighting
[] Figure out how to/if we can use list.arr lists in runtime.rkt
[] currying
[] srcloc for a-any
[] Make objects retain order w.r.t syntax of literal and update
[] Vim highlight numbers
[] better pretty-printing libraries
[] optional "," in object literals
[] Constructed types and brands
[] brand names for debugging and general user-friendliness
[] pretty-printing objects
   - Take brands into account (names for them)

Redex
[] Redex the initial semantics
  [x] basic objects
  [] seals
  [] extending
[] Come up with a define-split-test form that makes a test run on both
   the Redex semantics and the Racket interpreter (may require a
   compile-value function over answers & exceptions...)
[] Go from Redex-generated terms to AST so we can randomly test the
   Racket implementation as well
[] add s-let and pyret compile let

Cleanup:
[] decide on a line length and enforce
[] ordering of things in grammar vs pyret.rkt
[] consistent naming in grammar for lists of things
[] s-data and s-dot should agree on symbol vs. string
[] clean up runtime.rkt into more .arr definitions
[] bug report on module docs for language definitions
[] bug report on resolved-module-path? docs
[] letrec* for sequences
[] Should use a stable paren-based syntax in compile-tests rather than
   needing to update that on syntax changes
[] optional trailing commas everywhere

TODO templates:

  Adding a new piece of syntax:
  [] Add it to ast.rkt, and export it
  [] Write parser tests for the new form
  [] Add it to grammar.rkt
  [] Modify parser.rkt to parse the new syntax from grammar.rkt

  Making your new syntax functional:
  [] Write compile-tests for your new syntax (see adding new syntax)
  [] If you can desugar it entirely (this is way better):
    [] Make your changes to desugar.rkt
  [] If you cannot desugar it entirely:
    [] Figure out how to split it between desugar.rkt and compile.rkt

